<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from jimmy.xacro                    | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!--defining a namespace and the robot name are mandatory-->
<robot name="Jimmy" xmlns:xacro="jimmy_description_xacro_namespace">
  <!-- Definition of the color black in RVIZ -->
  <material name="black">
    <!--The float values are the result of (x/255)-->
    <color rgba="0.0 0.0 0.0 0.8"/>
  </material>
  <!-- Definition of the color white in RVIZ -->
  <material name="white">
    <color rgba="1.0 1.0 1.0 1.0"/>
  </material>
  <!--These definitions came from "gazebo_ros_demos_kinetic_devel" package-->
  <material name="blue">
    <color rgba="0.0 0.0 0.8 1.0"/>
  </material>
  <material name="green">
    <color rgba="0.0 0.8 0.0 1.0"/>
  </material>
  <material name="grey">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="orange">
    <color rgba="1.0 0.423529411765 0.0392156862745 1.0"/>
  </material>
  <material name="brown">
    <color rgba="0.870588235294 0.811764705882 0.764705882353 1.0"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <!--===================================LINKS & JOINTS=======================================-->
  <!--Gazebo does not recognize the colors defined in "materials.xacro". Therefor
  Gazebo material tag must be specified for each link that we want to be a 
  specified color-->
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>
  <!--  -->
  <gazebo reference="left_drive_wheel_link">
    <material>Gazebo/Black</material>
    <kp>1000000.0</kp>
    <kd>10.0</kd>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <!--  -->
  <gazebo reference="right_drive_wheel_link">
    <material>Gazebo/Black</material>
    <kp>1000000.0</kp>
    <kd>10.0</kd>
    <mu1>1.5</mu1>
    <mu2>1.5</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <!--  -->
  <gazebo reference="left_castor_wheel_link">
    <material>Gazebo/Black</material>
    <!--tags are from: http://gazebosim.org/tutorials/?tut=ros_urdf-->
    <!--These values fixed the robot from bouncing side to side:
          Problem: http://answers.gazebosim.org/question/24459/model-contact-with-ground-issue/
          solution: see: http://answers.gazebosim.org/question/3334/slip1-slip2-in-urdf/-->
    <kp>1000000.0</kp>
    <kd>10.0</kd>
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <!--  -->
  <gazebo reference="right_castor_wheel_link">
    <material>Gazebo/Black</material>
    <!--tags are from: http://gazebosim.org/tutorials/?tut=ros_urdf-->
    <!--These values fixed the robot from bouncing side to side:
          Problem: http://answers.gazebosim.org/question/24459/model-contact-with-ground-issue/
          solution: see: http://answers.gazebosim.org/question/3334/slip1-slip2-in-urdf/-->
    <kp>1000000.0</kp>
    <kd>10.0</kd>
    <mu1>0.0</mu1>
    <mu2>0.0</mu2>
    <fdir1>1 0 0</fdir1>
    <maxVel>1.0</maxVel>
    <minDepth>0.00</minDepth>
  </gazebo>
  <!--=========================================PLUG-INS======================================-->
  <!--This plugin allows us to run a diff_drive controller in Gazebo -->
  <gazebo>
    <plugin filename="libgazebo_ros_diff_drive.so" name="differential_drive_controller">
      <legacyMode>false</legacyMode>
      <alwaysOn>true</alwaysOn>
      <updateRate>20</updateRate>
      <leftJoint>base_to_left_drive_wheel_joint</leftJoint>
      <rightJoint>base_to_right_drive_wheel_joint</rightJoint>
      <wheelSeparation>0.4</wheelSeparation>
      <wheelDiameter>0.36</wheelDiameter>
      <torque>20</torque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_link</robotBaseFrame>
    </plugin>
  </gazebo>
  <!-- This is a camera plug-in for gazebo. This allows us to see the what is
  going on in the simulation using a camera-->
  <gazebo reference="camera_link">
    <material>Gazebo/Green</material>
    <sensor name="camera_1" type="camera">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_camera.so" name="camera_controller">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>/jimmy/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>
  <!-- lidar plugin. This allows us to get lidar data from teh world in Gazebo -->
  <gazebo reference="laser">
    <!--THis is the link name-->
    <sensor name="jimmy_lidar_sensor" type="gpu_ray">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>760</samples>
            <resolution>1</resolution>
            <min_angle>-1.57</min_angle>
            <max_angle>1.57</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin filename="libgazebo_ros_gpu_laser.so" name="gazebo_ros_head_lidar_controller">
        <topicName>/jimmy/laser/scan</topicName>
        <!--topic for laser output-->
        <frameName>jimmylidar</frameName>
        <!--state the topic for transforms for tf-->
      </plugin>
    </sensor>
  </gazebo>
  <!--==============END of PART #0 - IMPORT FROM OTHER FILES=================-->
  <!--=======================================================================-->
  <!--25 kg-->
  <!--2 kg-->
  <!--0.25 kg-->
  <!--0.25 kg-->
  <!--2 kg-->
  <!--1.5 kg-->
  <!--0.5 kg-->
  <!--3 kg-->
  <!--======================END ofPART #1 - CONSTANTS========================-->
  <!--=======================================================================-->
  <!--=======================================================================-->
  <!--============================PART #2 - MACROS===========================-->
  <!-- This section contains macros for the two types of links I use, namely -->
  <!-- box and cylinder. I do not use any spere shapes.                      -->
  <!--======================END ofPART #2 - MACROS===========================-->
  <!--=======================================================================-->
  <!--=======================================================================-->
  <!--===================PART #3 - LINK & JOINT DEFINITIONS==================-->
  <link name="base_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.65 0.381 0.132"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="-0.325 -0.1905 0.066"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.65 0.381 0.132"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="-0.325 -0.1905 0.066"/>
      <material name="white"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="-0.325 -0.1905 0.066"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="20"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.270975" ixy="0" ixz="0" iyy="0.733206666667" iyz="0" izz="0.733206666667"/>
    </inertial>
  </link>
  <!--TEST====================================================================================-->
  <link name="camera_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.02 0.06 0.03"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.02 0.06 0.03"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="green"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="0.1"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="3.75e-05" ixy="0" ixz="0" iyy="1.08333333333e-05" iyz="0" izz="1.08333333333e-05"/>
    </inertial>
  </link>
  <joint name="base_to_camera__joint" type="fixed">
    <parent link="base_link"/>
    <child link="camera_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="0.0 -0.155 0.17"/>
  </joint>
  <link name="left_drive_wheel_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <cylinder length="0.049" radius="0.181"/>
      </geometry>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <cylinder length="0.049" radius="0.181"/>
      </geometry>
      <!-- roll pitch and yaw will move the item in 3D space to arrange it how
               we want it in relation to the origin. the XYZ is to move it around
             the 3D space relative to the origin. Note that 1.57075 is pi/2 -->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <material name="black"/>
    </visual>
    <!--TODO-->
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="2"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--These lines of code came from Emiliano Borghi's project-->
      <inertia ixx="0.0167806666667" ixy="0" ixz="0" iyy="0.0167806666667" iyz="0" izz="0.032761"/>
    </inertial>
  </link>
  <joint name="base_to_left_drive_wheel_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <parent link="base_link"/>
    <child link="left_drive_wheel_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.52835 0.037 -0.035"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <link name="right_drive_wheel_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <cylinder length="0.049" radius="0.181"/>
      </geometry>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <cylinder length="0.049" radius="0.181"/>
      </geometry>
      <!-- roll pitch and yaw will move the item in 3D space to arrange it how
               we want it in relation to the origin. the XYZ is to move it around
             the 3D space relative to the origin. Note that 1.57075 is pi/2 -->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <material name="black"/>
    </visual>
    <!--TODO-->
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="2"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--These lines of code came from Emiliano Borghi's project-->
      <inertia ixx="0.0167806666667" ixy="0" ixz="0" iyy="0.0167806666667" iyz="0" izz="0.032761"/>
    </inertial>
  </link>
  <joint name="base_to_right_drive_wheel_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <parent link="base_link"/>
    <child link="right_drive_wheel_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.52835 -0.421 -0.035"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <link name="left_castor_mount_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.1145 0.1 0.0057"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.1145 0.1 0.0057"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="white"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="0.25"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.000209010208333" ixy="0" ixz="0" iyy="0.000273807083333" iyz="0" izz="0.000273807083333"/>
    </inertial>
  </link>
  <joint name="base_to_left_castor_mount_joint" type="fixed">
    <parent link="base_link"/>
    <child link="left_castor_mount_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.09445 -0.041 -0.03265"/>
  </joint>
  <link name="left_castor_dummy_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="white"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="1.5"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  <joint name="left_castor_mount_to_left_castor_dummy_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 0 1"/>
    <parent link="left_castor_mount_link"/>
    <child link="left_castor_dummy_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="0.0 0.0 -0.01"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <link name="left_castor_wheel_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <cylinder length="0.049" radius="0.07925"/>
      </geometry>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <cylinder length="0.049" radius="0.07925"/>
      </geometry>
      <!-- roll pitch and yaw will move the item in 3D space to arrange it how
               we want it in relation to the origin. the XYZ is to move it around
             the 3D space relative to the origin. Note that 1.57075 is pi/2 -->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <material name="Black"/>
    </visual>
    <!--TODO-->
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="2"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--These lines of code came from Emiliano Borghi's project-->
      <inertia ixx="0.00354044791667" ixy="0" ixz="0" iyy="0.00354044791667" iyz="0" izz="0.0062805625"/>
    </inertial>
  </link>
  <joint name="left_castor_dummy_to_left_castor_wheel_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <parent link="left_castor_dummy_link"/>
    <child link="left_castor_wheel_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.037 0.0 -0.10785"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <!--+++++++++++++++++++++++++++++++++++RIGHT CASTOR+++++++++++++++++++++++++++++++++++++++++++++++++++-->
  <link name="right_castor_mount_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.1145 0.1 0.0057"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.1145 0.1 0.0057"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="black"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="0.25"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.000209010208333" ixy="0" ixz="0" iyy="0.000273807083333" iyz="0" izz="0.000273807083333"/>
    </inertial>
  </link>
  <joint name="base_to_right_castor_mount_joint" type="fixed">
    <parent link="base_link"/>
    <child link="right_castor_mount_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.09445 -0.344 -0.03265"/>
  </joint>
  <link name="right_castor_dummy_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="orange"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="1.5"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
  </link>
  <joint name="right_castor_mount_to_right_castor_dummy_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 0 1"/>
    <parent link="right_castor_mount_link"/>
    <child link="right_castor_dummy_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="0.0 0.0  -0.01"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <link name="right_castor_wheel_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <cylinder length="0.049" radius="0.07925"/>
      </geometry>
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <cylinder length="0.049" radius="0.07925"/>
      </geometry>
      <!-- roll pitch and yaw will move the item in 3D space to arrange it how
               we want it in relation to the origin. the XYZ is to move it around
             the 3D space relative to the origin. Note that 1.57075 is pi/2 -->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <material name="Black"/>
    </visual>
    <!--TODO-->
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="1.57079632679 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="2"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--These lines of code came from Emiliano Borghi's project-->
      <inertia ixx="0.00354044791667" ixy="0" ixz="0" iyy="0.00354044791667" iyz="0" izz="0.0062805625"/>
    </inertial>
  </link>
  <joint name="right_castor_dummy_to_right_castor_wheel_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 1 0"/>
    <parent link="right_castor_dummy_link"/>
    <child link="right_castor_wheel_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.037 0 -0.10785"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <link name="lms_structural_extrusion_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.03 0.03 0.425"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.03 0.03 0.425"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="white"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="3"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.04538125" ixy="0" ixz="0" iyy="0.04538125" iyz="0" izz="0.04538125"/>
    </inertial>
  </link>
  <joint name="base_link_to_lms_structural_extrusion_joint" type="fixed">
    <parent link="base_link"/>
    <child link="lms_structural_extrusion_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.3531 -0.1905 0.2173"/>
  </joint>
  <link name="lms_rotating_shaft_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <cylinder length="0.235" radius="0.006"/>
      </geometry>
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <cylinder length="0.235" radius="0.006"/>
      </geometry>
      <!-- roll pitch and yaw will move the item in 3D space to arrange it how
               we want it in relation to the origin. the XYZ is to move it around
             the 3D space relative to the origin. Note that 1.57075 is pi/2 -->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="white"/>
    </visual>
    <!--TODO-->
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="1.5"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--These lines of code came from Emiliano Borghi's project-->
      <inertia ixx="0.006916625" ixy="0" ixz="0" iyy="0.006916625" iyz="0" izz="2.7e-05"/>
    </inertial>
  </link>
  <joint name="base_link_to_rotating_lms_shaft_joint" type="continuous">
    <axis rpy="0 0 0" xyz="0 0 1"/>
    <parent link="base_link"/>
    <child link="lms_rotating_shaft_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.2531 -0.1905 0.3195"/>
    <!--This introduces friction so that continious joints don't spin indefinitly
      damping is only used in Gazebo4 and earlier.... -->
    <dynamics damping="0.0" friction="0.15"/>
  </joint>
  <link name="lms_plate_link">
    <!--If you do not explicitly specify a <collision> element. Gazebo will 
      treat your link as "invisible" to laser scanners and collision checking-->
    <collision>
      <geometry>
        <box size="0.18415 0.1651 0.00635"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
    </collision>
    <visual>
      <geometry>
        <!--box dimensions is Meters. L X W X H where the L X H is a ractange, 
              and the H extrudes it upwards -->
        <box size="0.18415 0.1651 0.00635"/>
      </geometry>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <material name="white"/>
    </visual>
    <inertial>
      <!-- line below allows us to insert:<origin rpy="${rpy}" xyz="${xyz}"/>-->
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--all blocks now need a 'mass' argument-->
      <mass value="0.5"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
      <inertia ixx="0.00113743052083" ixy="0" ixz="0" iyy="0.00141464770833" iyz="0" izz="0.00141464770833"/>
    </inertial>
  </link>
  <joint name="lms_rotating_shaft_to_lms_plate_joint" type="fixed">
    <parent link="lms_rotating_shaft_link"/>
    <child link="lms_plate_link"/>
    <!-- this is the point at which the two parts attach to one another    -->
    <origin xyz="-0.04905 0 0.120675"/>
  </joint>
  <!--=======================================================================-->
  <!--========SPECIAL CASES for LINK & JOINT DEFINITIONS=====================-->
  <!-- This area contains one offs, such as a link with meshes, a links that -->
  <!-- anchor the laser (point in space from which all /scan topic data is   -->
  <!-- refrenced), and I think thats it. But basically a bunch of non xacro  -->
  <!-- code (even though where I can, I still use xacro. Ex: joints).        -->
  <!--=======================================================================-->
  <!-- Connect the LMS mesh to the aluminum plate on which it sits.       -->
  <!--xacro:fixed_joint name="lms_plate_to_lms_mesh" parent="lms_plate" child="hokuyo">
    <origin xyz="0.12 0 0.073"/>
  </xacro:fixed_joint-->
  <joint name="lms_plate_to_lms_mesh" type="fixed">
    <!--axis tag is not used according to: https://wiki.ros.org/urdf/XML/joint -->
    <!--axis xyz="0 0 0" /-->
    <!--relationship of child link to parent link. This is doing the laser rendering
        in rviz, not the mesh.-->
    <origin rpy="-1.57 0.0 0" xyz=".15 0 .1"/>
    <parent link="lms_plate_link"/>
    <child link="laser"/>
  </joint>
  <!-- this link is the actual LMS, and is rendered by importing a mesh file.-->
  <!-- This link definition is not using any macros as there is only one type-->
  <!-- of this link. No need to automate it.                                 -->
  <link name="laser">
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.20 0.20 0.20"/>
      </geometry>
    </collision>
    <visual>
      <geometry>
        <!--The meshes file was demonstrated by the tutorial. The sizing was
            figured out by my question on answers.ros.org. the values are 
            multipliers. We are showing the size at 9.5% of the original mesh file -->
        <mesh filename="package://jimmy_description/meshes/lms-200-30106.dae" scale="0.095 0.095 0.095"/>
      </geometry>
      <!--This is responsible for rendering the mesh on the lms plate-->
      <origin rpy="1.57 0.0 0.0" xyz="-0.02 0.025 0"/>
      <material name="white"/>
    </visual>
    <inertial>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <!--mass is the kg value of the link-->
      <mass value="1"/>
      <!--3x3 inertia matrix. See: https://wiki.ros.org/urdf/XML/link
      the values are copy pasted from: http://gazebosim.org/tutorials/?tut=ros_urdf-->
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </link>
  <!--Here I am trying to implement this answer:                             -->
  <!--https://answers.ros.org/question/274774/how-to-merge-laser-tf-with-other-tf-frames/-->
  <!--The "laser" link is the way to represent the laser producing object in -->
  <!--the URDF file.                                                         -->
  <!--link name="laser"></link-->
  <!--This is the joint between the "laser" link and the lms mesh This is    -->
  <!--where I would raise the laser and tilt it a smidge (as in RVIZ it      -->
  <!--doesn't look quite spot on...). I did not use a xacro for the fixed    -->
  <!--joint as it would append the "laser" link to "laser_link" and I think  -->
  <!--"laser" is a key word.                                                 -->
  <!--joint name="lms_mesh_link_to_laser_source" type="fixed">
    <parent link="lms_link"/>
    <child link="laser"/-->
  <!-- this is the point at which the two parts attach to one another, Here is
    where I modify the values to change how the laser is rendered in RViz. As p 
    gets larger than 0.17 the top of the scan goes too far away from bot.-->
  <!--origin rpy= "${pi/-2} -0.025 0" xyz="0 0 0"/>
  </joint-->
  <!--===============END OF PART #3 - LINK & JOINT DEFINITIONS===============-->
  <!--=======================================================================-->
</robot>

